// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { GetHealthStatusError, GetHealthStatusResponse, RegisterData, RegisterError, RegisterResponse, LoginData, LoginError, LoginResponse, LogoutError, LogoutResponse, SelfError, SelfResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, GetQuizError, GetQuizResponse } from './types.gen';

export const client = createClient(createConfig());

export const getHealthStatus = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthStatusResponse, GetHealthStatusError, ThrowOnError>({
        ...options,
        url: '/api/health'
    });
};

export const register = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
        ...options,
        url: '/api/auth/register'
    });
};

export const login = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
        ...options,
        url: '/api/auth/login'
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
        ...options,
        url: '/api/auth/logout'
    });
};

export const self = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<SelfResponse, SelfError, ThrowOnError>({
        ...options,
        url: '/api/auth/self'
    });
};

export const updateUser = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<UpdateUserData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        ...options,
        url: '/api/user'
    });
};

export const getQuiz = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuizResponse, GetQuizError, ThrowOnError>({
        ...options,
        url: '/api/quiz'
    });
};